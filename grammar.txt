'begin', 'end', '\$'
'if', 'else', 'while', 'return', 'int', 'void', 'float', 'endif'
'+', '-', '*', '/', '=', '==', '!=', '<', '>', '<=', '>=', '||', '&&', '!'
';', ',', '(', ')', '{', '}', '[', ']'
'literal'
'identifier'

'Program' → FunctList \$
'FunctList' → Func FunctList
'FunctList' → ε
'Func' → TypeFunc indentifier ( ) { Stmts }
'Stmts' → Stmt ; Stmts
'Stmts' → ε
'Stmt' → SimpleStmt
'Stmt' → Conditional
'Stmt' → Loop
'SimpStmt' → VarDefine
'SimpStmt' → Assign
'CondIf' → if ( Logic ) { Stmts } CondElse endif
'CondElse' → else { Stmts } 
'CondElse' → ε
'Loop' → while ( Logic ) { Stmts }
'VarDefine' → TypeSpec VarId
'VarId' → identifier
'VarId' → Assign
'Assign' → indentifier = Math
'Assign' → indentifier = Logic
'Math'  → MathCont MathAdd
'MathAdd' → AddOp MathCont MathAdd
'MathAdd' → ε
'MathCont'  → MathPar MathMult
'MathMult' → MultOp MathPar MathMult
'MathMult' → ε
'MathPar'  → ( Math )
'MathPar' → Id    
'Logic' → ( Logic )
'Logic' → LogicComp LopConec Logic
'Logic' → LopNeg Logic
'LogicComp' → Id LopComp Id
'TypeFunc' → TypeSpec
'TypeFunc' → void
'TypeSpec' → int
'TypeSpec' → float
'TypeSpec' → char
'Id' → literals (0.1, 'C', 100)
'Id' → indentifier
'AddOp' → +
'AddOp' → -
'MultOp' → *
'MultOp' → /
'LopNeg' → !
'LopConec' → ||
'LopConec' → &&
'LopComp' → ==
'LopComp' → >
'LopComp' → <
'LopComp' → >=
'LopComp' → <=
'LopComp' → !=